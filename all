factorial <- function(n) {
  if (n == 0 || n == 1) {
    return(1)
  } else {
    return(n * factorial(n - 1))
  }
}

num <- as.integer(readline(prompt="Enter a number: "))
if (num < 0) {
  print("Factorial does not exist for negative numbers.")
} else {
  result <- factorial(num)
  print(paste("The factorial of", num, "is", result))
}
R program to check whether the given number is a prime number or not:
r
Copy code
is_prime <- function(n) {
  if (n <= 1) {
    return(FALSE)
  }
  for (i in 2:sqrt(n)) {
    if (n %% i == 0) {
      return(FALSE)
    }
  }
  return(TRUE)
}

num <- as.integer(readline(prompt="Enter a number: "))
if (is_prime(num)) {
  print(paste(num, "is a prime number."))
} else {
  print(paste(num, "is not a prime number."))
}
R program to print the Multiplication Table:
r
Copy code
num <- as.integer(readline(prompt="Enter a number: "))
for (i in 1:10) {
  result <- num * i
  print(paste(num, "x", i, "=", result))
}
R program to check whether the given number is an Armstrong number or not:
r
Copy code
is_armstrong <- function(n) {
  temp <- n
  num_digits <- nchar(n)
  sum <- 0
  while (temp > 0) {
    digit <- temp %% 10
    sum <- sum + digit^num_digits
    temp <- temp %/% 10
  }
  return(n == sum)
}

num <- as.integer(readline(prompt="Enter a number: "))
if (is_armstrong(num)) {
  print(paste(num, "is an Armstrong number."))
} else {
  print(paste(num, "is not an Armstrong number."))
}
R program to print the Fibonacci Series up to n terms:
r
Copy code
n <- as.integer(readline(prompt="Enter the number of terms: "))
fib <- numeric(n)
fib[1] <- 0
fib[2] <- 1

for (i in 3:n) {
  fib[i] <- fib[i - 1] + fib[i - 2]
}

print("Fibonacci Series:")
print(fib)
Fe
